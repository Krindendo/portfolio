---

---

<header
  class="space-y-6 flex flex-col items-center relative"
  style="width: 260px;"
>
  <a
    class="text-base font-bold text-zinc-700 dark:text-zinc-200 anaglyph-text"
    href="/">Marko Samek</a
  >
  <div class="relative w-full">
    <div
      class="absolute left-0 top-0 h-px bg-zinc-400"
      style="width: 90px; transform: translateX(85px) translateZ(0px);"
    >
    </div>
  </div>
  <div class="fixed right-10 top-2">
    <button
      id="theme-btn"
      class="focus-outline p-2 sm:p-1 rounded-md border-2 border-zinc-500 dark:border-zinc-400"
      title="Toggles light & dark"
      aria-label="auto"
      aria-live="polite"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        id="moon-svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
        class="lucide lucide-moon dark:hidden"
        ><path d="M12 3a6 6 0 0 0 9 9 9 9 0 1 1-9-9Z"></path></svg
      >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        id="sun-svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
        class="lucide lucide-sun hidden dark:block"
        ><circle cx="12" cy="12" r="4"></circle><path d="M12 2v2"></path><path
          d="M12 20v2"></path><path d="m4.93 4.93 1.41 1.41"></path><path
          d="m17.66 17.66 1.41 1.41"></path><path d="M2 12h2"></path><path
          d="M20 12h2"></path><path d="m6.34 17.66-1.41 1.41"></path><path
          d="m19.07 4.93-1.41 1.41"></path></svg
      >
    </button>
  </div>
</header>

<style>
  #theme-btn svg {
    @apply scale-125 hover:rotate-12 sm:scale-100;
  }
</style>

<script>
  const primaryColorScheme = ""; // "light" | "dark"

  // Get theme data from local storage
  const currentTheme = localStorage.getItem("theme");

  function getPreferTheme() {
    // return theme value in local storage if it is set
    if (currentTheme) return currentTheme;

    // return primary color scheme if it is set
    if (primaryColorScheme) return primaryColorScheme;

    // return user device's prefer color scheme
    return window.matchMedia("(prefers-color-scheme: dark)").matches
      ? "dark"
      : "light";
  }

  let themeValue = getPreferTheme();

  function setPreference() {
    localStorage.setItem("theme", themeValue);
    reflectPreference();
  }

  function reflectPreference() {
    document.firstElementChild.setAttribute("data-theme", themeValue);

    document
      .querySelector("#theme-btn")
      ?.setAttribute("aria-label", themeValue);

    // Get a reference to the body element
    const body = document.body;

    // Check if the body element exists before using getComputedStyle
    if (body) {
      // Get the computed styles for the body element
      const computedStyles = window.getComputedStyle(body);

      // Get the background color property
      const bgColor = computedStyles.backgroundColor;

      // Set the background color in <meta theme-color ... />
      document
        .querySelector("meta[name='theme-color']")
        ?.setAttribute("content", bgColor);
    }
  }

  // set early so no page flashes / CSS is made aware
  reflectPreference();

  window.onload = () => {
    function setThemeFeature() {
      // set on load so screen readers can get the latest value on the button
      reflectPreference();

      // now this script can find and listen for clicks on the control
      document.querySelector("#theme-btn")?.addEventListener("click", () => {
        themeValue = themeValue === "light" ? "dark" : "light";
        setPreference();
      });
    }

    setThemeFeature();

    // Runs on view transitions navigation
    document.addEventListener("astro:after-swap", setThemeFeature);
  };

  // sync with system changes
  window
    .matchMedia("(prefers-color-scheme: dark)")
    .addEventListener("change", ({ matches: isDark }) => {
      themeValue = isDark ? "dark" : "light";
      setPreference();
    });
</script>
